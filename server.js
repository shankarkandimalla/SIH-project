// server.js
const express = require('express');
const path = require('path');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const cors = require('cors'); 
require('dotenv').config(); 

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());

// Initialize the Gemini client
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Serve all static files from the root SIH folder
app.use(express.static(path.join(__dirname, '..'))); 

app.get('/', (req, res) => {
    res.send('Trip Planner Backend is running ðŸš€');
});

// Trip POST route (now powered by Gemini)
app.post('/api/trip', async (req, res) => {
    // --- NEW: Add the new fields to the destructuring
    const { destination, startDate, endDate, budget, members, interests, otherInterests, hotelLevel } = req.body;

    // --- You may want to add your new fields to this check as well
    if (!destination || !startDate || !endDate || !budget || !interests) {
        return res.status(400).json({ error: 'All fields are required' });
    }

    try {
        const userPrompt = `
            You are a professional trip planner. I need you to create a detailed day-by-day travel itinerary for a trip. please ensure you have included
            every detail specefied and try to specify any places and interesting activities if the user didnt specify any.

            Please provide the output as a JSON object with the following structure:
            {
              "destination": "string",
              "budget": "number",
              "interests": "string",
              "itinerary": [
                {
                  "day": "number",
                  "date": "YYYY-MM-DD",
                  "activity": "string"
                }
              ]
            }

            Here are the trip details:
            - Destination: ${destination}
            - Start Date: ${startDate}
            - End Date: ${endDate}
            - Budget: ${budget} INR
            - Number of people: ${members}
            - Interests: ${interests}
            - Other interested activities: ${otherInterests}
            - Hotel level specification: ${hotelLevel}
        `;
        
        // Get the specific model we want to use
        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
        
        // This line makes the API call. await pauses the code here until it gets a response.
        const result = await model.generateContent(userPrompt);
        const response = await result.response;
        const text = response.text();

        // The API returns a text string. This code finds the JSON inside that string and parses it.
        const jsonMatch = text.match(/\{[\s\S]*\}/);
        const tripPlan = jsonMatch ? JSON.parse(jsonMatch[0]) : null;

        // If for some reason the JSON parsing fails, send an error
        if (!tripPlan) {
            return res.status(500).json({ error: 'Failed to parse AI response.' });
        }

        // Send the AI-generated trip plan back to the frontend
        res.json({
            message: 'Trip generated by AI successfully âœ…',
            tripPlan: tripPlan
        });

    } catch (err) {
        // This code runs if the API call fails
        console.error('Error calling Gemini API:', err);
        res.status(500).json({ error: 'Failed to generate trip. Please try again.' });
    }
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server running at http://localhost:${PORT}`);
});